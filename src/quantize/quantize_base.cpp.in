/***************************************************************************
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  SYCL-BLAS: BLAS implementation using SYCL
 *
 *  @filename quantize_base.cpp.in
 *
 **************************************************************************/

#include "quantize/quantize.h"
#include "quantize/quantize.hpp"

#include "executors/executor_sycl.hpp"
#include "policy/sycl_policy_handler.h"

namespace blas {
namespace internal {

using executor_t = Executor<${EXECUTOR}>;
// DATA_TYPE is ignored, so scalar_t is not defined

using event_t = typename executor_t::policy_t::event_t;

/**
 * @brief Base case quantization where it just copies
 *        one buffer of float to another
 */
template <>
event_t _quantize<float, float, executor_t>(executor_t& ex,
                                            cl::sycl::buffer<float> input,
                                            cl::sycl::buffer<float> output) {
  return Quantize<float, float>::run(ex, input, output);
}

#ifdef BLAS_DATA_TYPE_DOUBLE

/**
 * @brief Base case quantization where it just copies
 *        one buffer of double to another
 */
template <>
event_t _quantize<double, double, executor_t>(executor_t& ex,
                                              cl::sycl::buffer<double> input,
                                              cl::sycl::buffer<double> output) {
  return Quantize<double, double>::run(ex, input, output);
}

/**
 * @brief Specialization for quantizing float to double
 */
template <>
event_t _quantize<float, double, executor_t>(executor_t& ex,
                                             cl::sycl::buffer<float> input,
                                             cl::sycl::buffer<double> output) {
  return Quantize<float, double>::run(ex, input, output);
}

/**
 * @brief Specialization for quantizing double to float
 */
template <>
event_t _quantize<double, float, executor_t>(executor_t& ex,
                                             cl::sycl::buffer<double> input,
                                             cl::sycl::buffer<float> output) {
  return Quantize<double, float>::run(ex, input, output);
}

#endif  // BLAS_DATA_TYPE_DOUBLE

}  // namespace internal
}  // namespace blas
