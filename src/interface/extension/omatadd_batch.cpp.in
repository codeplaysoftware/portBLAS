/***************************************************************************
 *
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  SYCL-BLAS: BLAS implementation using SYCL
 *
 *  @filename omatadd_batch.cpp.in
 *
 **************************************************************************/

#include "interface/extension_interface.hpp"
#include "operations/extension/matcopy_batch.hpp"
#include "sb_handle/kernel_constructor.hpp"
#include "sb_handle/portblas_handle.hpp"
#include "operations/extension/transpose.hpp" 

namespace blas {
namespace internal {

template typename SB_Handle::event_t
_omatadd_batch(
    SB_Handle& sb_handle, char transA, char transB, ${INDEX_TYPE} m,
    ${INDEX_TYPE} n, ${DATA_TYPE} alpha, BufferIterator<${DATA_TYPE}> A, ${INDEX_TYPE} lda,
    ${INDEX_TYPE} strideA, ${DATA_TYPE} beta, BufferIterator<${DATA_TYPE}> B,
    ${INDEX_TYPE} ldb, ${INDEX_TYPE} strideB, BufferIterator<${DATA_TYPE}> C,
    ${INDEX_TYPE} ldc, ${INDEX_TYPE} strideC, ${INDEX_TYPE} batch_size,
    const typename SB_Handle::event_t& _dependencies);

#ifdef SB_ENABLE_USM

template typename SB_Handle::event_t
_omatadd_batch<SB_Handle, ${DATA_TYPE}, ${INDEX_TYPE}>(
    SB_Handle& sb_handle, char transA, char transB, ${INDEX_TYPE} m,
    ${INDEX_TYPE} n, ${DATA_TYPE} alpha, ${DATA_TYPE}* A, ${INDEX_TYPE} lda,
    ${INDEX_TYPE} strideA, ${DATA_TYPE} beta, ${DATA_TYPE}* B,
    ${INDEX_TYPE} ldb, ${INDEX_TYPE} strideB, ${DATA_TYPE}* C,
    ${INDEX_TYPE} ldc, ${INDEX_TYPE} strideC, ${INDEX_TYPE} batch_size,
    const typename SB_Handle::event_t& _dependencies);

template typename SB_Handle::event_t
_omatadd_batch<SB_Handle, ${DATA_TYPE}, ${INDEX_TYPE}>(
    SB_Handle& sb_handle, char transA, char transB, ${INDEX_TYPE} m,
    ${INDEX_TYPE} n, ${DATA_TYPE} alpha, const  ${DATA_TYPE}* A, ${INDEX_TYPE} lda,
    ${INDEX_TYPE} strideA, ${DATA_TYPE} beta, const ${DATA_TYPE}* B,
    ${INDEX_TYPE} ldb, ${INDEX_TYPE} strideB, ${DATA_TYPE}* C,
    ${INDEX_TYPE} ldc, ${INDEX_TYPE} strideC, ${INDEX_TYPE} batch_size,
    const typename SB_Handle::event_t& _dependencies);

#endif

}  // namespace internal
}  // namespace blas
