/***************************************************************************
 *
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  portBLAS: BLAS implementation using SYCL
 *
 *  @filename transpose.cpp.in
 *
 **************************************************************************/

#include "container/sycl_iterator.hpp"
#include "interface/extension_interface.hpp"
#include "sb_handle/kernel_constructor.hpp"
#include "sb_handle/portblas_handle.hpp"
#include "operations/extension/transpose.hpp"

namespace blas {
namespace internal {

// Out-of-place
template typename SB_Handle::event_t _transpose<false, ${DATA_TYPE}>
    (SB_Handle& sb_handle, ${INDEX_TYPE} m, ${INDEX_TYPE} n, 
     BufferIterator<${DATA_TYPE}> A, ${INDEX_TYPE} ld_a,
     BufferIterator<${DATA_TYPE}> B, ${INDEX_TYPE} ld_b,
     const typename SB_Handle::event_t& _dependencies);

// In-place
template typename SB_Handle::event_t _transpose<true, ${DATA_TYPE}>
    (SB_Handle& sb_handle, ${INDEX_TYPE} m, ${INDEX_TYPE} n, 
     BufferIterator<${DATA_TYPE}> A, ${INDEX_TYPE} ld_a,
     BufferIterator<${DATA_TYPE}> B, ${INDEX_TYPE} ld_b,
     const typename SB_Handle::event_t& _dependencies);

#ifdef SB_ENABLE_USM
// Out-of-place
template typename SB_Handle::event_t _transpose<false, ${DATA_TYPE}>
    (SB_Handle& sb_handle, ${INDEX_TYPE} m, ${INDEX_TYPE} n,
     ${DATA_TYPE}* A, ${INDEX_TYPE} ld_a,
     ${DATA_TYPE}* B, ${INDEX_TYPE} ld_b,
     const typename SB_Handle::event_t& _dependencies);

// In-place
template typename SB_Handle::event_t _transpose<true, ${DATA_TYPE}>
    (SB_Handle& sb_handle, ${INDEX_TYPE} m, ${INDEX_TYPE} n,
     ${DATA_TYPE}* A, ${INDEX_TYPE} ld_a,
     ${DATA_TYPE}* B, ${INDEX_TYPE} ld_b,
     const typename SB_Handle::event_t& _dependencies);
#endif


}  // namespace internal
}  // namespace blas
