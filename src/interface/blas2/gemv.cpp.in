/***************************************************************************
 *
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  SYCL-BLAS: BLAS implementation using SYCL
 *
 *  @filename gemv.cpp.in
 *
 **************************************************************************/

#include "container/sycl_iterator.hpp"
#include "executors/executor_sycl.hpp"
#include "executors/kernel_constructor.hpp"
#include "interface/blas2_interface.hpp"
#include "operations/blas1_trees.hpp"
#include "operations/blas2_trees.hpp"
#include "operations/blas_constants.hpp"
#include "policy/sycl_policy_handler.hpp"
#include "views/view_sycl.hpp"

namespace blas {
namespace internal {

{% for policy in policy_types -%}
{% for index in index_types -%}
{% for data in data_types -%}

/*!
 @brief Generalised matrix vector product with rectangular non-symmetric
 matrices.

 Generalised matrix vector product with rectangular non-symmetric matrices, i.e.
 computing the mathematical operation:

 y = alpha*A*x + beta*y

 See the netlib blas interface documentation for more details of the high level
 interface: http://www.netlib.org/lapack/explore-html/db/d58/sgemv_8f.html
   Executor& ex,         // Executor (sycl, parallel, serial, etc)
    char _trans,          // The transposition of the matrix ('n', 't', 'c')
    index_t _M,         // The size of dimension M of the matrix (rows)
    index_t _N,         // The size of dimension N of the matrix (columns)
    element_t _alpha,             // Scalar parameter Alpha
    container_t0 _mA,      // An array (LDA,N), with the first m*n elements
    index_t _lda,       // Specifies the first dimension of a, max(1, m)
    container_t1 _vx,      // An array of dimension at least:
 (1+(n-1)*abs(incx))
                          // when trans = 'n' and (1+(m-1)*abs(incx) otherwise,
                          // containing the vector "x"
    increment_t _incx,  // The increment for elements in x (nonzero).
    element_t _beta,              // Scalar parameter Beta
    container_t2 _vy,      // An array of dimension at least:
 (1+(m-1)*abs(incy))
                          // when trans = "n" and (1+(n-1)*abs(incy) otherwise,
    // containing the vector "y" (if beta is nonzero). When
    // finished, y is overwritten with the updated vector.
    increment_t _incy  // The increment for elements in y (nonzero).
 */
template typename Executor<PolicyHandler<{{policy}}>>::policy_t::event_t _gemv(
    Executor<PolicyHandler<{{policy}}>>& ex, char _trans, {{index}} _M, {{index}} _N,
    {{data}} _alpha, BufferIterator<{{data}}, {{policy}}> _mA, {{index}} _lda,
    BufferIterator<{{data}}, {{policy}}> _vx, {{index}} _incx, {{data}} _beta,
    BufferIterator<{{data}}, {{policy}}> _vy, {{index}} _incy);

{% endfor -%}
{% endfor -%}
{% endfor -%}

}  // namespace internal
}  // namespace blas
