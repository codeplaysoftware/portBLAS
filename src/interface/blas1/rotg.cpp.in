/***************************************************************************
 *
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  portBLAS: BLAS implementation using SYCL
 *
 *  @filename rotg.cpp.in
 *
 **************************************************************************/
#include "container/sycl_iterator.hpp"
#include "interface/blas1_interface.hpp"
#include "operations/blas1_trees.hpp"
#include "operations/blas_constants.hpp"
#include "sb_handle/kernel_constructor.hpp"
#include "sb_handle/portblas_handle.hpp"
#include "views/view_sycl.hpp"

namespace blas {
namespace internal {

/**
 * \brief Given the Cartesian coordinates (a, b) of a point, the rotg routines
 * return the parameters c, s, r, and z associated with the Givens rotation.
 * @tparam sb_handle_t SB_Handle type
 * @tparam container_0_t Buffer Iterator or USM Pointer
 * @tparam container_1_t Buffer Iterator or USM Pointer
 * @tparam container_2_t Buffer Iterator or USM Pointer
 * @tparam container_3_t Buffer Iterator or USM Pointer
 * @param sb_handle SB_Handle
 * @param a[in, out] On entry, memory object holding the x-coordinate of the
 * point. On exit, the scalar z.
 * @param b[in, out] On entry, memory object holding the y-coordinate of the
 * point. On exit, the scalar r.
 * @param c[out] Memory object holding the parameter c.
 * @param s[out] Memory object holding the parameter s.
 * @return Vector of events to wait for.
 */
template typename SB_Handle::event_t _rotg(
    SB_Handle& sb_handle, BufferIterator<${DATA_TYPE}> a,
    BufferIterator<${DATA_TYPE}> b, BufferIterator<${DATA_TYPE}> c,
    BufferIterator<${DATA_TYPE}> s,
    const typename SB_Handle::event_t& dependencies);

#ifdef SB_ENABLE_USM
template typename SB_Handle::event_t _rotg(
    SB_Handle& sb_handle, ${DATA_TYPE} * a, ${DATA_TYPE} * b, ${DATA_TYPE} * c,
    ${DATA_TYPE} * s, const typename SB_Handle::event_t& dependencies);
#endif

}  // namespace internal
}  // namespace blas
