/***************************************************************************
 *
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  portBLAS: BLAS implementation using SYCL
 *
 *  @filename rotmg.cpp.in
 *
 **************************************************************************/
#include "container/sycl_iterator.hpp"
#include "interface/blas1_interface.hpp"
#include "operations/blas1_trees.hpp"
#include "operations/blas_constants.hpp"
#include "sb_handle/kernel_constructor.hpp"
#include "sb_handle/portblas_handle.hpp"
#include "views/view_sycl.hpp"

namespace blas {
namespace internal {

/**
 * Given the Cartesian coordinates (x1, y1) of a point, the rotmg routines
 * compute the components of a modified Givens transformation matrix H that
 * zeros the y-component of the resulting point:
 *
 *                      [xi] = H * [xi * sqrt(d1) ]
 *                      [0 ]       [yi * sqrt(d2) ]
 *
 * Depending on the flag parameter, the components of H are set as follows:
 *
 * -1.0: [h11 h12]     0.0: [1.0 h12]     1.0: [h11 1.0]     -2.0 = [1.0 0.0]
 *       [h21 h22]          [h21 1.0]          [-1.0 h22]           [0.0 1.0]
 *
 * Rotmg may apply scaling operations to d1, d2 and x1 to avoid overflows.
 *
 * @tparam sb_handle_t SB_Handle type
 * @tparam container_0_t Buffer Iterator or USM Pointer
 * @tparam container_1_t Buffer Iterator or USM Pointer
 * @tparam container_2_t Buffer Iterator or USM Pointer
 * @tparam container_3_t Buffer Iterator or USM Pointer
 * @tparam container_4_t Buffer Iterator or USM Pointer
 * @param sb_handle SB_Handle
 * @param _d1[in,out] On entry, memory object holding the scaling factor for the
 * x-coordinate. On exit, the re-scaled _d1.
 * @param _d2[in,out] On entry, memory object holding the scaling factor for the
 * y-coordinate. On exit, the re-scaled _d2.
 * @param _x1[in,out] On entry, memory object holding the x-coordinate. On exit,
 * the re-scaled _x1
 * @param _y1[in] Memory object holding the y-coordinate of the point.
 * @param _param[out] Buffer with the following layout: [flag, h11, h21, h12,
 * h22].
 * @return Vector of events to wait for.
 */
template typename SB_Handle::event_t _rotmg(
    SB_Handle& sb_handle, BufferIterator<${DATA_TYPE}> _d1,
    BufferIterator<${DATA_TYPE}> _d2, BufferIterator<${DATA_TYPE}> _x1,
    BufferIterator<${DATA_TYPE}> _y1, BufferIterator<${DATA_TYPE}> _param,
    const typename SB_Handle::event_t& dependencies);

template typename SB_Handle::event_t _rotmg(
    SB_Handle& sb_handle, BufferIterator<${DATA_TYPE}> _d1,
    BufferIterator<${DATA_TYPE}> _d2, BufferIterator<${DATA_TYPE}> _x1,
    ${DATA_TYPE} _y1, BufferIterator<${DATA_TYPE}> _param,
    const typename SB_Handle::event_t& dependencies);

#ifdef SB_ENABLE_USM
template typename SB_Handle::event_t _rotmg(
    SB_Handle& sb_handle, ${DATA_TYPE} * _d1, ${DATA_TYPE} * _d2,
    ${DATA_TYPE} * _x1, ${DATA_TYPE} * _y1, ${DATA_TYPE} * _param,
    const typename SB_Handle::event_t& dependencies);

template typename SB_Handle::event_t _rotmg(
    SB_Handle& sb_handle, ${DATA_TYPE} * _d1, ${DATA_TYPE} * _d2,
    ${DATA_TYPE} * _x1, ${DATA_TYPE} _y1, ${DATA_TYPE} * _param,
    const typename SB_Handle::event_t& dependencies);
#endif

}  // namespace internal
}  // namespace blas
