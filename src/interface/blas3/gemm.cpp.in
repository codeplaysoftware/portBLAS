/***************************************************************************
 *
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  SYCL-BLAS: BLAS implementation using SYCL
 *
 *  @filename gemm.cpp.in
 *
 **************************************************************************/

#include "container/sycl_iterator.hpp"
#include "executors/executor_sycl.hpp"
#include "interface/blas3_interface.hpp"
#include "operations/blas_constants.hpp"
#include "policy/sycl_policy_handler.hpp"
#include "views/view_sycl.hpp"

namespace blas {
namespace internal {

{% for policy in policy_types -%}
{% for index in index_types -%}
{% for data in data_types -%}

// gemm
template typename Executor<PolicyHandler<{{policy}}>>::policy_t::event_t _gemm(
    Executor<PolicyHandler<{{policy}}>>& ex, char _TransA, char _TransB, {{index}} _M,
    {{index}} _N, {{index}} _K, {{data}} _alpha, BufferIterator<{{data}}, {{policy}}> a_,
    {{index}} _lda, BufferIterator<{{data}}, {{policy}}> b_, {{index}} _ldb,
    {{data}} _beta, BufferIterator<{{data}}, {{policy}}> _C, {{index}} _ldc);
// batched gemm
template typename Executor<PolicyHandler<{{policy}}>>::policy_t::event_t _gemm_batched(
    Executor<PolicyHandler<{{policy}}>>& ex, char _TransA, char _TransB, {{index}} _M,
    {{index}} _N, {{index}} _K, {{data}} _alpha, BufferIterator<{{data}}, {{policy}}> a_,
    {{index}} _lda, BufferIterator<{{data}}, {{policy}}> b_, {{index}} _ldb,
    {{data}} _beta, BufferIterator<{{data}}, {{policy}}> _C, {{index}} _ldc,
    {{index}} batch_size);

{% endfor -%}
{% endfor -%}
{% endfor -%}

}  // namespace internal
}  // namespace blas
