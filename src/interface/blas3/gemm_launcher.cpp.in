/***************************************************************************
 *
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  SYCL-BLAS: BLAS implementation using SYCL
 *
 *  @filename gemm_launcher.cpp.in
 *
 **************************************************************************/

#include "container/sycl_iterator.hpp"
#include "executors/executor_sycl.hpp"
#include "executors/kernel_constructor.hpp"
#include "interface/gemm_launcher.hpp"
#include "operations/blas3_trees.hpp"
#include "operations/blas_constants.hpp"
#include "policy/sycl_policy_handler.hpp"
#include "views/view_sycl.hpp"

namespace blas {

{% for gemm in gemm_configurations -%}
{% for transpose_a in ["false", "true"] -%}
{% for transpose_b in ["false", "true"] -%}
{% for is_beta_zero in ["false", "true"] -%}

template class Gemm_Launcher<
        {{gemm.workgroup_size}}, {{gemm.double_buffer}}, {{gemm.bank_conflict_a}}, {{gemm.bank_conflict_b}}, {{gemm.cache_line_size}},
    Tile<{{gemm.tile_item_row}}, {{gemm.tile_item_col}}, {{gemm.tile_workgroup_row}}, {{gemm.tile_workgroup_col}}, {{gemm.tile_block_row}}, {{gemm.tile_block_col}}>, {{transpose_a}},
    {{transpose_b}}, static_cast<int>(Gemm_t::{{gemm.type}}), {{is_beta_zero}}>;

{% for policy in policy_types -%}
{% for index in index_types -%}
{% for data in data_types -%}

template typename Executor<PolicyHandler<{{policy}}>>::policy_t::event_t Gemm_Launcher<
    {{gemm.workgroup_size}}, {{gemm.double_buffer}}, {{gemm.bank_conflict_a}}, {{gemm.bank_conflict_b}}, {{gemm.cache_line_size}},
    Tile<{{gemm.tile_item_row}}, {{gemm.tile_item_col}}, {{gemm.tile_workgroup_row}}, {{gemm.tile_workgroup_col}}, {{gemm.tile_block_row}}, {{gemm.tile_block_col}}>, {{transpose_a}},
    {{transpose_b}}, static_cast<int>(Gemm_t::{{gemm.type}}), {{is_beta_zero}}>::
    _select_gemm<Executor<PolicyHandler<{{policy}}>>,
                 BufferIterator<{{data}}, {{policy}}>,
                 BufferIterator<{{data}}, {{policy}}>,
                 BufferIterator<{{data}}, {{policy}}>, {{data}},
                 {{index}}>(
        Executor<PolicyHandler<{{policy}}>>& ex, {{index}} _M, {{index}} _N,
        {{index}} _K, {{data}} _alpha,
        BufferIterator<{{data}}, {{policy}}> a_, {{index}} _lda,
        BufferIterator<{{data}}, {{policy}}> b_, {{index}} _ldb,
        {{data}} _beta, BufferIterator<{{data}}, {{policy}}> _C,
        {{index}} _ldc, {{index}} batch_size);
        
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}
{% endfor -%}


}  // namespace blas
