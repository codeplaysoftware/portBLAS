/***************************************************************************
 *
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  SYCL-BLAS: BLAS implementation using SYCL
 *
 *  @filename gemm_launcher.cpp.in
 *
 **************************************************************************/
#include "container/sycl_iterator.hpp"
#include "executors/executor_sycl.hpp"
#include "executors/kernel_constructor.hpp"
#include "interface/gemm_launcher.hpp"
#include "operations/blas3_trees.hpp"
#include "operations/blas_constants.hpp"
#include "policy/sycl_policy_handler.hpp"
#include "views/view_sycl.hpp"

namespace blas {
template class Gemm_Launcher<
    ${WG_SIZE}, ${DOUBLE_BUFFER}, ${CONFLICT_A}, ${CONFLICT_B}, ${CL_SIZE},
    Tile<${TIR}, ${TIC}, ${TWR}, ${TWC}, ${TLR}, ${TLC}>, ${TRANS_A},
    ${TRANS_B}, static_cast<int>(Gemm_t::${GEMM_TYPE}), ${IS_BETA_ZERO}>;

template typename Executor<${EXECUTOR}>::policy_t::event_t Gemm_Launcher<
    ${WG_SIZE}, ${DOUBLE_BUFFER}, ${CONFLICT_A}, ${CONFLICT_B}, ${CL_SIZE},
    Tile<${TIR}, ${TIC}, ${TWR}, ${TWC}, ${TLR}, ${TLC}>, ${TRANS_A},
    ${TRANS_B}, static_cast<int>(Gemm_t::${GEMM_TYPE}), ${IS_BETA_ZERO}>::
    _select_gemm<Executor<${EXECUTOR}>,
                 BufferIterator<${DATA_TYPE}, codeplay_policy>,
                 BufferIterator<${DATA_TYPE}, codeplay_policy>,
                 BufferIterator<${DATA_TYPE}, codeplay_policy>, ${DATA_TYPE},
                 ${INDEX_TYPE}>(
        Executor<${EXECUTOR}>& ex, ${INDEX_TYPE} _M, ${INDEX_TYPE} _N,
        ${INDEX_TYPE} _K, ${DATA_TYPE} _alpha,
        BufferIterator<${DATA_TYPE}, codeplay_policy> a_, ${INDEX_TYPE} _lda,
        BufferIterator<${DATA_TYPE}, codeplay_policy> b_, ${INDEX_TYPE} _ldb,
        ${DATA_TYPE} _beta, BufferIterator<${DATA_TYPE}, codeplay_policy> _C,
        ${INDEX_TYPE} _ldc, ${INDEX_TYPE} batch_size);

}  // namespace blas
