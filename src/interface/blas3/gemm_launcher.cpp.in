/***************************************************************************
 *
 *  @license
 *  Copyright (C) Codeplay Software Limited
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  For your convenience, a copy of the License has been included in this
 *  repository.
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  portBLAS: BLAS implementation using SYCL
 *
 *  @filename gemm_launcher.cpp.in
 *
 **************************************************************************/

#include "container/sycl_iterator.hpp"
#include "interface/gemm_launcher.hpp"
#include "operations/blas3_trees.hpp"
#include "operations/blas_constants.hpp"
#include "operations/extension/reduction.hpp"
#include "sb_handle/kernel_constructor.hpp"
#include "sb_handle/portblas_handle.hpp"
#include "views/view_sycl.hpp"

namespace blas {

// BufferIterator
template typename SB_Handle::event_t Gemm_Launcher<
    BufferIterator<${DATA_TYPE}>, BufferIterator<${DATA_TYPE}>,
    BufferIterator<${DATA_TYPE}>, ${WG_SIZE}, ${DOUBLE_BUFFER},
    ${CONFLICT_A}, ${CONFLICT_B}, ${CL_SIZE},
    Tile<${TIR}, ${TIC}, ${TWR}, ${TWC}, ${TSR}, ${TSC}, ${TLR}, ${TLC}, ${TIB},
         ${TWB}, ${JM_M}, ${JM_N}, ${JM_K}, ${JM_IN_T}, ${JM_OUT_T}>,
    ${TRANS_A}, ${TRANS_B}, ${SYMM_A}, ${SYMM_B},
    static_cast<int>(gemm_memory_t::${GEMM_MEMORY_TYPE}),
    static_cast<int>(gemm_algorithm_t::${GEMM_SHAPE_TYPE}),
    static_cast<int>(gemm_vectorization_t::${GEMM_VECTORIZE_TYPE}),
    ${IS_BETA_ZERO}, ${VECTOR_SIZE},
    static_cast<int>(gemm_batch_type_t::${BATCH_TYPE}),
    ${USE_JOINT_MATRIX}>::_select_gemm<SB_Handle, ${DATA_TYPE},
                                       ${INDEX_TYPE}>(
    SB_Handle& sb_handle, ${INDEX_TYPE} _M, ${INDEX_TYPE} _N, ${INDEX_TYPE} _K,
    ${DATA_TYPE} _alpha, BufferIterator<${DATA_TYPE}> a_, ${INDEX_TYPE} _lda,
    ${INDEX_TYPE} _stridea, BufferIterator<${DATA_TYPE}> b_,
    ${INDEX_TYPE} _ldb, ${INDEX_TYPE} _strideb, ${DATA_TYPE} _beta,
    BufferIterator<${DATA_TYPE}> _C, ${INDEX_TYPE} _ldc,
    ${INDEX_TYPE} _stridec, ${INDEX_TYPE} batch_size,
    const typename SB_Handle::event_t& _dependencies);

#ifdef BLAS_ENABLE_CONST_INPUT
template typename SB_Handle::event_t Gemm_Launcher<
    BufferIterator<${DATA_TYPE} const>, BufferIterator<${DATA_TYPE} const >,
    BufferIterator<${DATA_TYPE}>, ${WG_SIZE}, ${DOUBLE_BUFFER},
    ${CONFLICT_A}, ${CONFLICT_B}, ${CL_SIZE},
    Tile<${TIR}, ${TIC}, ${TWR}, ${TWC}, ${TSR}, ${TSC}, ${TLR}, ${TLC}, ${TIB},
         ${TWB}, ${JM_M}, ${JM_N}, ${JM_K}, ${JM_IN_T}, ${JM_OUT_T}>,
    ${TRANS_A}, ${TRANS_B}, ${SYMM_A}, ${SYMM_B},
    static_cast<int>(gemm_memory_t::${GEMM_MEMORY_TYPE}),
    static_cast<int>(gemm_algorithm_t::${GEMM_SHAPE_TYPE}),
    static_cast<int>(gemm_vectorization_t::${GEMM_VECTORIZE_TYPE}),
    ${IS_BETA_ZERO}, ${VECTOR_SIZE},
    static_cast<int>(gemm_batch_type_t::${BATCH_TYPE}),
    ${USE_JOINT_MATRIX} >
        ::_select_gemm<SB_Handle, ${DATA_TYPE}, ${INDEX_TYPE}>(
            SB_Handle& sb_handle, ${INDEX_TYPE} _M, ${INDEX_TYPE} _N,
            ${INDEX_TYPE} _K, ${DATA_TYPE} _alpha,
            BufferIterator<${DATA_TYPE} const> a_, ${INDEX_TYPE} _lda,
            ${INDEX_TYPE} _stridea, BufferIterator<${DATA_TYPE} const> b_,
            ${INDEX_TYPE} _ldb, ${INDEX_TYPE} _strideb, ${DATA_TYPE} _beta,
            BufferIterator<${DATA_TYPE}> _C, ${INDEX_TYPE} _ldc,
            ${INDEX_TYPE} _stridec, ${INDEX_TYPE} batch_size,
            const typename SB_Handle::event_t& _dependencies);
#endif

#ifdef SB_ENABLE_USM
// pointer
template typename SB_Handle::event_t Gemm_Launcher<
    ${DATA_TYPE}*, ${DATA_TYPE}*, ${DATA_TYPE}*, ${WG_SIZE},
    ${DOUBLE_BUFFER}, ${CONFLICT_A}, ${CONFLICT_B}, ${CL_SIZE},
    Tile<${TIR}, ${TIC}, ${TWR}, ${TWC}, ${TSR}, ${TSC}, ${TLR}, ${TLC}, ${TIB},
         ${TWB}, ${JM_M}, ${JM_N}, ${JM_K}, ${JM_IN_T}, ${JM_OUT_T}>,
    ${TRANS_A}, ${TRANS_B}, ${SYMM_A}, ${SYMM_B},
    static_cast<int>(gemm_memory_t::${GEMM_MEMORY_TYPE}),
    static_cast<int>(gemm_algorithm_t::${GEMM_SHAPE_TYPE}),
    static_cast<int>(gemm_vectorization_t::${GEMM_VECTORIZE_TYPE}),
    ${IS_BETA_ZERO}, ${VECTOR_SIZE},
    static_cast<int>(gemm_batch_type_t::${BATCH_TYPE}),
    ${USE_JOINT_MATRIX}>::_select_gemm<SB_Handle, ${DATA_TYPE},
                                       ${INDEX_TYPE}>(
    SB_Handle& sb_handle, ${INDEX_TYPE} _M, ${INDEX_TYPE} _N, ${INDEX_TYPE} _K,
    ${DATA_TYPE} _alpha, ${DATA_TYPE} * a_, ${INDEX_TYPE} _lda,
    ${INDEX_TYPE} _stridea, ${DATA_TYPE} * b_, ${INDEX_TYPE} _ldb,
    ${INDEX_TYPE} _strideb, ${DATA_TYPE} _beta, ${DATA_TYPE} * _C,
    ${INDEX_TYPE} _ldc, ${INDEX_TYPE} _stridec, ${INDEX_TYPE} batch_size,
    const typename SB_Handle::event_t& _dependencies);

// const pointer
template typename SB_Handle::event_t Gemm_Launcher<
    const ${DATA_TYPE}*, const ${DATA_TYPE}*, ${DATA_TYPE}*,
    ${WG_SIZE}, ${DOUBLE_BUFFER}, ${CONFLICT_A}, ${CONFLICT_B}, ${CL_SIZE},
    Tile<${TIR}, ${TIC}, ${TWR}, ${TWC}, ${TSR}, ${TSC}, ${TLR}, ${TLC}, ${TIB},
         ${TWB}, ${JM_M}, ${JM_N}, ${JM_K}, ${JM_IN_T}, ${JM_OUT_T}>,
    ${TRANS_A}, ${TRANS_B}, ${SYMM_A}, ${SYMM_B},
    static_cast<int>(gemm_memory_t::${GEMM_MEMORY_TYPE}),
    static_cast<int>(gemm_algorithm_t::${GEMM_SHAPE_TYPE}),
    static_cast<int>(gemm_vectorization_t::${GEMM_VECTORIZE_TYPE}),
    ${IS_BETA_ZERO}, ${VECTOR_SIZE},
    static_cast<int>(gemm_batch_type_t::${BATCH_TYPE}),
    ${USE_JOINT_MATRIX}>::_select_gemm<SB_Handle, ${DATA_TYPE},
                                       ${INDEX_TYPE}>(
    SB_Handle& sb_handle, ${INDEX_TYPE} _M, ${INDEX_TYPE} _N, ${INDEX_TYPE} _K,
    ${DATA_TYPE} _alpha, const ${DATA_TYPE} * a_, ${INDEX_TYPE} _lda,
    ${INDEX_TYPE} _stridea, const ${DATA_TYPE} * b_, ${INDEX_TYPE} _ldb,
    ${INDEX_TYPE} _strideb, ${DATA_TYPE} _beta, ${DATA_TYPE} * _C,
    ${INDEX_TYPE} _ldc, ${INDEX_TYPE} _stridec, ${INDEX_TYPE} batch_size,
    const typename SB_Handle::event_t& _dependencies);
#endif

}  // namespace blas
